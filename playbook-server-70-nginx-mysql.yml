---
- hosts: zabbix_servers
  become: yes
  vars_files:
    - zabbix-server.env
  tasks:
    - name: Update system packages
      apt:
        update_cache: yes

    - name: Install depended packages for "{{ serviceName }}""
      apt:
        update_cache: yes
        name: "{{ item }}"
        state: present
      loop:
        - mariadb-server
        - mariadb-client
        - nginx
        - php
        - php-mysql
        - php8.1-fpm
        - snmp
        - php-gd
        - php-xml
        - php-bcmath
        - php-mbstring
        - php-ldap
        - php-net-socket
        - wget
        - mc
        - curl
        - nmap

    - name: Download Zabbix 7.0 LTS
      get_url:
        url: "https://repo.zabbix.com/zabbix/7.0/ubuntu/pool/main/z/zabbix-release/zabbix-release_latest+ubuntu22.04_all.deb"
        dest: "/tmp/zabbix-release_latest+ubuntu22.04_all.deb"

    - name: Install Zabbix 7.0 LTS
      apt:
        deb: "/tmp/zabbix-release_latest+ubuntu22.04_all.deb"
      register: install_zabbix_server
      ignore_errors: yes

    - name:  Update system packages
      apt:
        update_cache: yes

    - name: Install Zabbix server
      apt:
        name:
          - zabbix-server-mysql
          - zabbix-frontend-php
          - zabbix-sql-scripts
          - zabbix-agent
          - zabbix-nginx-conf
        state: present


    - name: Install PyMySQL for Python 3
      apt:
        name: python3-pymysql
        state: present

    - name: DB creation (Unix socket)
      shell: |
        echo "CREATE DATABASE IF NOT EXISTS zabbix;" | mysql --user=root
      become: yes
      become_user: root

    - name: Create DB user (Unix socket)
      shell: |
        echo "CREATE USER IF NOT EXISTS 'zabbix'@'localhost' IDENTIFIED BY '{{ dbPassword }}'; GRANT ALL PRIVILEGES ON zabbix.* TO 'zabbix'@'localhost'; FLUSH PRIVILEGES;" | mysql --user=root
      become: yes
      become_user: root

    - name: Import DB Schema for Zabbix server
      shell: "zcat /usr/share/zabbix-sql-scripts/mysql/server.sql.gz | mysql -u zabbix -p'{{ dbPassword }}' zabbix"
      args:
        executable: /bin/bash


    - name: Setup Zabbix server Add vars to config
      lineinfile:
        path: /etc/zabbix/zabbix_server.conf
        regexp: '^# DBPassword='
        line: 'DBPassword={{ dbPassword }}'
      become: yes
    
    - name: Setup Zabbix server Add vars to config
      lineinfile:
        path: /etc/zabbix/zabbix_server.conf
        regexp: '^# DBHost='
        line: 'DBHost=localhost'
      become: yes

    - name: Create zabbix.conf.php
      copy:
        dest: /etc/zabbix/web/zabbix.conf.php
        content: |
          <?php
          // Zabbix GUI configuration file.

          $DB['TYPE']			= 'MYSQL';
          $DB['SERVER']			= 'localhost';
          $DB['PORT']			= '0';
          $DB['DATABASE']			= 'zabbix';
          $DB['USER']			= 'zabbix';
          $DB['PASSWORD']			= '{{ dbPassword }}';

          // Schema name. Used for PostgreSQL.
          $DB['SCHEMA']			= '';

          // Used for TLS connection.
          $DB['ENCRYPTION']		= false;
          $DB['KEY_FILE']			= '';
          $DB['CERT_FILE']		= '';
          $DB['CA_FILE']			= '';
          $DB['VERIFY_HOST']		= false;
          $DB['CIPHER_LIST']		= '';

          // Vault configuration. Used if database credentials are stored in Vault secrets manager.
          $DB['VAULT']			= '';
          $DB['VAULT_URL']		= '';
          $DB['VAULT_DB_PATH']		= '';
          $DB['VAULT_TOKEN']		= '';
          $DB['VAULT_CERT_FILE']		= '';
          $DB['VAULT_KEY_FILE']		= '';
          // Uncomment to bypass local caching of credentials.
          // $DB['VAULT_CACHE']		= true;

          // Use IEEE754 compatible value range for 64-bit Numeric (float) history values.
          // This option is enabled by default for new Zabbix installations.
          // For upgraded installations, please read database upgrade notes before enabling this option.
          $DB['DOUBLE_IEEE754']		= false;

          // Uncomment and set to desired values to override Zabbix hostname/IP and port.
          // $ZBX_SERVER			= '';
          // $ZBX_SERVER_PORT		= '';

          $ZBX_SERVER_NAME		= '{{ serverName }}';

          $IMAGE_FORMAT_DEFAULT	= IMAGE_FORMAT_PNG;

          // Uncomment this block only if you are using Elasticsearch.
          // Elasticsearch url (can be string if same url is used for all types).
          //$HISTORY['url'] = [
          //	'uint' => 'http://localhost:9200',
          //	'text' => 'http://localhost:9200'
          //];
          // Value types stored in Elasticsearch.
          //$HISTORY['types'] = ['uint', 'text'];

          // Used for SAML authentication.
          // Uncomment to override the default paths to SP private key, SP and IdP X.509 certificates, and to set extra settings.
          //$SSO['SP_KEY']			= 'conf/certs/sp.key';
          //$SSO['SP_CERT']			= 'conf/certs/sp.crt';
          //$SSO['IDP_CERT']		= 'conf/certs/idp.crt';
          //$SSO['SETTINGS']		= [];
        owner: root
        group: root
        mode: '0644'
    - name: Change listen и server_name в /etc/zabbix/nginx.conf
      lineinfile:
        path: /etc/zabbix/nginx.conf
        regexp: '^#\s*(listen\s+\d+;)'
        line: 'listen 8080;'
        state: present
      notify: Restart Nginx

    - name: Change server_name в /etc/zabbix/nginx.conf
      lineinfile:
        path: /etc/zabbix/nginx.conf
        regexp: '^#\s*(server_name\s+.+;)'
        line: 'server_name example.com;'
        state: present
      notify: Restart Nginx

    - name: Restart Zabbix srv and agent
      service:
        name: "{{ item }}"
        state: restarted
      loop:
        - zabbix-server
        - zabbix-agent

    - name: Restart Nginx
      service:
        name: nginx
        state: restarted
      become: yes
      #become_user: root

  handlers:
    - name: Restart Nginx
      systemd:
        name: nginx
        state: restarted